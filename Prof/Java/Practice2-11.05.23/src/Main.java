import Strategy.RedheadDuck;

public class Main {

    /*
    * 1. Проблемы наследования
    * 2. Паттерн стратегия*/

    /*
    * Наследование часто имеет побочные эффекты, поэтому необходимо использовать паттерны проектирования
    * для генерации грамотной - гибкой архитектуры приложения.
    *
    * Стратегия - паттерн, предназначенный для инкапсуляции алгоритмов.
    *
    * Нужно искать изменяемые участки кода и выносить их в интерфейсы. Это повысит гибкость архитектуры(см. пакеты Simpleinheritance
    * и interfaceinheritance)
    *
    * Проблема:
    * Система продолжает расширяться: появляются новые разновидности уток. Необходимо обеспечить масштабируемое (гибкую)
    * архитектуру для учета новых уток, чтобы их можно быть легко добавлять
    *
    *
    * ДЗ:
    * Подумать о подключении интерфейсов в разрабатываемую систему
    * -- Попробовать запретить наследование и переопределение классов и методов (с пом final)
    * -- Сделать метод, имеющий произвольное кол-во параметров
    * ДЗ (практика)
    * 1. Из первой лекции преобразовать класс Tel-Ran в синглтон(синглетный класс)
    * 2. К программе для управления утками добавить полеты с пропеллером и утку, издающую звук squeek
    * 3. Подумать о наследовании
    * _______-
    * в книге по лекциям почитать по интерфейам:
    * Хорстман - 6 глава (интерфейсы)
    * Наследование объекта ООП
    * Банда четырех: 1 глава, стратегия, 5 глава синглтон
    *
    * */
    public static void main(String[] args) {
        System.out.println("Hello world!");

    RedheadDuck redheadDuck = new RedheadDuck();
    redheadDuck.performQuack();
    }
}
