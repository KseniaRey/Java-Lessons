/*План занятия
        1) Повторить примитивные типы
        2) Приведение типов
        3) Переполнение типа
        4) Знакомство со String
*/

/*
* Теория
* Компютер воспринимает память (набор нулей и единиц) как какой-то тип данных, т.е интерпретирует эти данные в какой-то
* тип. Иногда возникает необходимость интерпретировать один такой тип в другой, тогда возникают варианты:
*
* Неявное преобразование: процесс записи одной переменной в другую, при условии, что вторая больше первой и в ней достаточно места.
* int a = 10;
* byte b = 5;
* a = b;
* int занимает больше памяти, чем byte, поэтому если мы присвоим int(инту) байт, то компиллятор не будет выдавать какие-либо
* предупреждения. Грубо говоря, мы можем засунуть в трехлитровую бутылку (инт) объем воды из литровой бутылки(байт), сколько
* бы воды там не было. Но в трехлитровой может содержаться больше, чем 1 литр и вода в байт не поместится.
* Неявное преобразование (implicit conversion) в Java - это автоматическое преобразование значения одного типа
* данных в значение другого типа данных, которое выполняется компилятором без явного указания программистом.
*
* ЯВНОЕ ПРЕОБРАЗОВАНИЕ
* Если нельзя преобразовать тип неявно (компиллятор ругается), то можно выполнить это преобразование принудительно.
* Для этого преобразуемую переменную нужно поместить перед блоком (тип к которому приводим):
* int a =100;
* byte b = 10;
*
* b = (byte)a;
* В данном примере такое преобразование не вызовет проблем, т.к значение инта помещается в ренж байта, и такой операцией
* можно сэкономить память. Но если значение инта не поместилось в бай, то подобная операция привела бы к потере исходного
* значения, например,
* int a = 1000;
* byte b = 10;
* b = (byte) a
* ___________________________________________
*
* //ЗНАКОМСТВО СО STRING
*
* В Java существует класс для работы со строками (набором (массивом) символов). Чтобы создать строчную переменную, нужно так же,
* как и с примитивными типами указать тип String, например:
* String str = "";
*
* Строки в Java указываются в двойных кавычках, а символы в одинарных
*
* В Java для р-ты со строками в классе String допустимо использовать + (операция конкатенации), сложение, склеивание 2ух
* строк с помощью +;
*
* Поскольку String - ссылочный тип, к нему прилагаются ряд методов (процедур и функций) для работы со строками, которые
* можно вызывать через точку в переменной, например:
* str.length(); - вернет длину строки
* Такой вызов метода length() вернет длину (кол-во символов) в строке.
* .length() - всегда возвращает тип char
* */

/*
 * Заметки
 *
 * int s; - объявление (декларирование) переменной
 * s = 10; - инициализация переменной
 *
 * Руководство по тому, как пользоваться кодом (какой класс что делает) называется API
 *
 * */

public class Main {
    public static void main(String[] args) {
        //НЕЯВНОЕ ПРИВЕДЕНИЕ
        byte a = 70;
        int b = 1048;
        b = a;  //неявное приведение типа
        System.out.println("a " + a + " " + " b " + b); // что это за кошмар? -- это для того, чтобы в консоли текстовое значение
        //внутри "" не слилось со значанием переменной, и получилось - a 70 b 70

        // ЯВНОЕ ПРИВЕДЕНИЕ (ниже)
        int x = 50;
        byte y = (byte)x;  // объявляем переменную byte и явно приводим к ней переменную int
        System.out.println("x=" + x + "" + "y=" + y);
        x = 1000;
        System.out.println("x=" + x + "" + "y=" + y);
        y = (byte)x;            // явно приводим инт к байт
        System.out.println("x=" + x + "" + "y=" + y);

//        double d = 2; // 2.0
//        System.out.println(d);
//        int i = (int)d;
//        System.out.println(i);

        //_____________________
        //ЗНАКОМСТВО СО STRING -- ссылочный тип, можно работать как с объектами, но самого объекта там нет, только ссылка
        String str;    // declare String variable with an empty value; - декларация
        str = "Hello, World"; // first value; - инициализация

        System.out.println(str.length()); // show string length
        System.out.println(str + " " + '$'); // Выводим в консоли str и добавляем символ доллара

//        str = String.valueOf('$') // один из методов, это приведение char to String;

        str = str + "$"; // в переменную записать старое значение и прибавить $;
        System.out.println(str.charAt(5)); // вывод символа в заданной позиции
        System.out.println(str.indexOf('W')); // вывод символа по его позиции;
        System.out.println(str.replace('W', 's')); // заменяет все символы W на s. Возвращает строку с
        // измененными символами, но он не заменяет исходную строку.
        System.out.println(str); // вернет исходный вариант строки
        str = str.replace('l', 'k'); // присваиваем переменной измененную строку. Теперь str всегда будет содержать
        //измененнные символы;
        System.out.println(str);

        System.out.println(str.replaceFirst("k", "l")); // заменяет только первый из повторяющих
        System.out.println(str.substring(5)); //Вывести подстроку (все, что осталось) с 5 индекса
        System.out.println(str.substring(0, 7)); // Вывести подстроку с 0 чара до 7

        System.out.println(str.toLowerCase()); // всю строку нижним регистром
        System.out.println(str.toUpperCase()); // всю строку верхним регистром
    }
}