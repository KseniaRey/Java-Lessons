import java.util.Scanner;

public class Main {

    /*
    * План занятия
    * 1. Юнит-тесты (модульные) ПО ЮНИТ ТЕСТАМ ТАКЖЕ МОГУТ СПРОСИТЬ НА СОБЕСЕДОВАНИИ
    * 2. Повторение
    * */

    /*Теория
    * Тесты - проверка работы кода.
    * Тесты могут быть:
    * Функциональные
    * smoke - поверхностный тест
    * исследование критического пути - более глубокий тест
    * extended test (обширный тест) --> проверяем вообще все
    *
    * Нефункциональные
    * проверка безопасности
    * нагрузочное тестирование
    * проверка адаптивности (первый вид --> для людей с огранич возможностями. второй проверяет адаптивность единиц
    * измерения и языка, определение локализации)
    *
    * Юнит (модульное) тестирование осуществляется разработчиком --> тестирование небольшого участка кода.
    * Интеграционное тестирование --> тестирование связки всей системы (интеграции разных ее компонентов)
    *
    * Пример:
    * Например, ремонт в ванной комнате. Устанавливаем умывальник и новую дверь. Умывальник поставили, пошатали, воду
    * открыли - все работает. Это модульное тестирование. Дальше устанавливаем дверь. Ручка работает, петли тоже -
    * модульное тестирование пройдено. Открываем дверь и дверь бьется об умывальник - не учли размеры. Это интеграционный
    * тест, проверяющий взаимодействие двух частей кода.
    * */

    /*Чтобы создать тест --> Alt+Insert --> Test.
    Если верхняя строчка красная, то Alt+Enter и выбрать то, что он предлагает подгрузить
    * Потом в созданном классе ставим @Test и тут уже можно создавать метод, например, метод проверки калькулятора:
        @Test                                     //-->  с помощью этого делаем метод тестовым
        public void testSum(){
        Assertions.assertEquals(4, calculator.sum(2,2)); // число 4 - то, что мы ожидаем, дальше проверка
    }*/

    /*Задачи *
    * Реализовать игру лотерея. ПРоверять кол-во уаданных чисел и угаданные позиции чиселВсего сгенерировать 5 чисел*/
    public static void main(String[] args) {
    int a = 5;
        Scanner scan = new Scanner(System.in);
        Calculator calculator = new Calculator("Объект для работы");
        System.out.println(calculator.sum(2, 5));
        System.out.println("Доступ к статической переменной из класса: " + Calculator.version);
        Calculator calculator1 = new Calculator("Второй объект для работы");
        System.out.println("Доступ к нестатической переменной из объекта: " + calculator.getTitle());
        System.out.println("Доступ к нестатической переменной из объекта: " + calculator1.getTitle());
        System.out.println("Доступ к статической переменной из объекта: " + calculator.version);
        System.out.println("Доступ к статической переменной из объекта: " + calculator1.version);

    }
}